set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'

" Markdown syntax highlighting, etc
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'tmhedberg/SimpylFold'
Plugin 'lilydjwg/colorizer'
Plugin 'scrooloose/nerdtree'
Plugin 'Valloric/YouCompleteMe'
Plugin 'scrooloose/syntastic'
Plugin 'nvie/vim-flake8'
Plugin 'vim-scripts/indentpython.vim'
Plugin 'chriskempson/base16-vim'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-commentary'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

call vundle#end()

" Make backspace behave in a sane manner.
set backspace=indent,eol,start

" base16-default plugin (color scheme)
set background=dark
colorscheme base16-default
let base16colorspace=256

" Switch syntax highlighting on
syntax on

" Enable file type detection and do language-dependent indenting.
filetype plugin indent on

" reload files when changed on disk, i.e. via `git checkout`
set autoread

" UTF8
set encoding=utf-8

" Number of visual spaces per TAB
set tabstop=4

" Number of spaces in tab when editing
set softtabstop=4

" show trailing whitespace
set list
set listchars=tab:▸\ ,trail:▫

" Strip trailing whitespace
nnoremap <leader>$ :call whitespace#strip_trailing()<CR>

" tabs => spaces
set expandtab

" Show last command entered
set showcmd

" Highlight current line
set cursorline

" Visual autocomplete for command menu
set wildmenu
set wildignore=log/**,node_modules/**,target/**,tmp/**,*.rbc
set wildmode=longest,list,full

" highlight matching [{()}]
set showmatch

" Searching
set incsearch " search as characters are entered
set hlsearch " highlight matches
nnoremap <leader><leader> :nohlsearch<CR> " turn off search hl
set ignorecase  " case-insensitive search

" Folding
set foldenable " enable folding
let g:SimpylFold_docstring_preview=1
set foldlevelstart=10 " open most folds by default
nnoremap <space> za " space open/closes folds
set foldmethod=indent " fold based on indent level

" Show line numbers
set number

" show where you are
set ruler

" show context above/below cursorline
set scrolloff=3

" Allow hidden buffers, don't limit to 1 file per window/split
set hidden

" Default is 8, my machines can handle quite a bit more
set history=100

" Incase you forgot to sudo
cnoremap w!! %!sudo tee > /dev/null %

" Keymappings
" Enter to insert blank line below current, Shift+Enter to insert it above
map <Enter> o<ESC>
map <S-Enter> O<ESC>
inoremap jk <ESC>
map <C-n> :NERDTreeToggle<CR>
noremap <leader>l :Align

" Python settings - PEP8 indentation
au BufNewFile,BufRead *.py set tabstop=3
au BufNewFile,BufRead *.py set shiftwidth=4
au BufNewFile,BufRead *.py set textwidth=79
au BufNewFile,BufRead *.py set expandtab
au BufNewFile,BufRead *.py set autoindent
au BufNewFile,BufRead *.py set fileformat=unix
au BufNewFile,BufRead *.py set softtabstop=4

" Python settings - flag unnecessary whitespace
" au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

au BufNewFile,BufRead *.c set tabstop=4
au BufNewFile,BufRead *.c set softtabstop=4
au BufNewFile,BufRead *.c set shiftwidth=4
au BufNewFile,BufRead *.c set noexpandtab

" YouCompleteMe
let g:ycm_autoclose_preview_window_after_completion=1
let g:ycm_global_ycm_extra_conf = "~/.vim/.ycm_extra_conf.py"

" Syntastic recommended settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Pretty python code
let python_highlight_all=1

" vim-airline
set laststatus=2
set noshowmode

let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='base16_paraiso'
if !exists('g:airline_symbols')
        let g:airline_symbols = {}
endif
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.spell = 'Ꞩ'
let g:airline_symbols.notexists = '∄'
let g:airline_symbols.whitespace = 'Ξ'
